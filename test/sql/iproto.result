remote = require('net.box')
---
...
box.sql.execute('create table test (id primary key, a float, b text)')
---
...
space = box.space.test
---
...
space:replace{1, 2, '3'}
---
- [1, 2, '3']
...
space:replace{4, 5, '6'}
---
- [4, 5, '6']
...
space:replace{7, 8.5, '9'}
---
- [7, 8.5, '9']
...
box.sql.execute('select * from test')
---
- - [1, 2, '3']
  - [4, 5, '6']
  - [7, 8.5, '9']
...
box.schema.user.grant('guest','read,write,execute', 'universe')
---
...
cn = remote.connect(box.cfg.listen)
---
...
cn:ping()
---
- true
...
--
-- Static queries, with no parameters.
--
-- Simple select.
cn:execute('select * from test')
---
- [{'name': id}, {'name': 'a'}, {'name': 'b'}]
- - [1, 2, '3']
  - [4, 5, '6']
  - [7, 8.5, '9']
...
-- Operation with boolean result.
cn:execute('insert into test values (10, 11, NULL)')
---
- true
...
cn:execute('delete from test where a = 5')
---
- true
...
-- SQL errors.
cn:execute('insert into not_existing_table values ("kek")')
---
- error: 'SQL error: no such table: not_existing_table'
...
cn:execute('insert qwerty gjsdjq  q  qwd qmq;; q;qwd;')
---
- error: 'SQL error: near "qwerty": syntax error'
...
-- Empty result.
cn:execute('select id as identifier from test where a = 5;')
---
- [{'name': identifier}]
- []
...
-- netbox API errors.
cn:execute(100)
---
- error: 'SQL error: near "100": syntax error'
...
cn:execute('select 1', nil, {dry_run = true})
---
- error: execute does not support options
...
--
-- Parmaeters bindig.
--
cn:execute('select * from test where id = ?', {1})
---
- [{'name': id}, {'name': 'a'}, {'name': 'b'}]
- - [1, 2, '3']
...
parameters = {}
---
...
parameters[1] = {}
---
...
parameters[1][':value'] = 1
---
...
cn:execute('select * from test where id = :value', parameters)
---
- [{'name': id}, {'name': 'a'}, {'name': 'b'}]
- - [1, 2, '3']
...
cn:execute('select ?, ?, ?', {1, 2, 3})
---
- [{'name': '?'}, {'name': '?'}, {'name': '?'}]
- - [1, 2, 3]
...
parameters = {}
---
...
parameters[1] = 10
---
...
parameters[2] = {}
---
...
parameters[2]['@value2'] = 12
---
...
parameters[3] = {}
---
...
parameters[3][':value1'] = 11
---
...
cn:execute('select ?, :value1, @value2', parameters)
---
- [{'name': '?'}, {'name': ':value1'}, {'name': '@value2'}]
- - [10, 11, 12]
...
parameters = {}
---
...
parameters[1] = {}
---
...
parameters[1]['$value3'] = 1
---
...
parameters[2] = 2
---
...
parameters[3] = {}
---
...
parameters[3][':value1'] = 3
---
...
parameters[4] = 4
---
...
parameters[5] = 5
---
...
parameters[6] = {}
---
...
parameters[6]['@value2'] = 6
---
...
cn:execute('select $value3, ?, :value1, ?, ?, @value2, ?, $value3', parameters)
---
- [{'name': $value3}, {'name': '?'}, {'name': ':value1'}, {'name': '?'}, {'name': '?'},
  {'name': '@value2'}, {'name': '?'}, {'name': '$value3'}]
- - [1, 2, 3, 4, 5, 6, null, 1]
...
-- Try not-integer types.
msgpack = require('msgpack')
---
...
cn:execute('select ?, ?, ?, ?, ?', {'abc', -123.456, msgpack.NULL, true, false})
---
- [{'name': '?'}, {'name': '?'}, {'name': '?'}, {'name': '?'}, {'name': '?'}]
- - ['abc', -123.456, null, 1, 0]
...
-- Try to replace '?' in meta with something meaningful.
cn:execute('select ? as kek, ? as kek2', {1, 2})
---
- [{'name': kek}, {'name': 'kek2'}]
- - [1, 2]
...
--
-- Errors during parameters binding.
--
-- Try value > INT64_MAX. SQLite can't bind it, since it has no
-- suitable method in its bind API.
cn:execute('select ? as big_uint', {0xefffffffffffffff})
---
- error: SQL bind does not support numbers greater than int64_max
...
-- Bind incorrect parameters.
cn:execute('select ?', { {1, 2, 3} })
---
- error: 'Illegal parameter 1, SQL bind parameters must be array of scalars and one-key
    maps, like {str_name: value}'
...
parameters = {}
---
...
parameters[1] = {}
---
...
parameters[1][100] = 200
---
...
cn:execute('select ?', parameters)
---
- error: 'Illegal parameter 1, SQL bind parameters must be array of scalars and one-key
    maps, like {str_name: value}'
...
parameters = {}
---
...
parameters[1] = {}
---
...
parameters[1][':value'] = {kek = 300}
---
...
cn:execute('select :value', parameters)
---
- error: 'Illegal parameter 1, SQL bind parameters must be array of scalars and one-key
    maps, like {str_name: value}'
...
cn:close()
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
box.sql.execute('drop table test')
---
...
space = nil
---
...
